{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to CS61A Guide","text":"<p>This guide is a collection of notes and resources for the course CS61A: Structure and Interpretation of Computer Programs.</p> <p>Disclaimer</p> <p>This guide is not updated, endorsed, or approved by the CS61A staff. Content may be outdated or incorrect. Please refer to the official website for the most up-to-date information.</p> <p>This is not meant to replace the official website, but rather to supplement it.</p> <p>If you found this guide helpful, please consider starring the GitHub repository and sharing it with others.</p>"},{"location":"index.html#contributing","title":"Contributing","text":"<p>If you notice that any information is incorrect, missing, or removed, open an issue.</p> <p>If you would like to make changes or add your content to the guide, fork the repository and open a pull request.</p>"},{"location":"exams/midterm/cheat-sheet.html","title":"Midterm Cheat Sheet","text":""},{"location":"exams/midterm/cheat-sheet.html#names-and-functions","title":"Names and Functions","text":"<p>Split Expression: <pre><code>a = 1\nb = 2\na, b = b, a # Swaps values instantly\n</code></pre></p>"},{"location":"exams/midterm/cheat-sheet.html#logical-operators","title":"Logical Operators","text":""},{"location":"exams/midterm/cheat-sheet.html#and","title":"<code>and</code>","text":"<ol> <li>Evaluate the left operand.</li> <li>If the left operand evaluates to a falsy value, evaluate to the left operand.</li> <li>Otherwise, evaluate to the right operand.</li> </ol>"},{"location":"exams/midterm/cheat-sheet.html#or","title":"<code>or</code>","text":"<ol> <li>Evaluate the left operand.</li> <li>If the left operand evaluates to a truthy value, evaluate to the left operand.</li> <li>Otherwise, evaluate to the right operand.</li> </ol>"},{"location":"exams/midterm/cheat-sheet.html#is","title":"<code>is</code>","text":"<p>Compares whether the variable location in memory is the same. In otherwise, it checks if it is the same instance  of an object.</p>"},{"location":"exams/midterm/cheat-sheet.html#classes","title":"Classes","text":""},{"location":"exams/midterm/cheat-sheet.html#inheritance","title":"Inheritance","text":"<p>Use the <code>super()</code> to retrieve the parent class (or the class that the current class inherits from).</p>"},{"location":"exams/midterm/cheat-sheet.html#constructor","title":"Constructor","text":"<p>Use the <code>__init__(self, arg1, arg2, argN)</code> method to create a constructor for a class.</p>"},{"location":"exams/midterm/cheat-sheet.html#self","title":"<code>self</code>","text":"<p>When referencing the current instance, use <code>self.&lt;name&gt;</code></p>"},{"location":"exams/midterm/cheat-sheet.html#string-representation","title":"String Representation","text":""},{"location":"exams/midterm/cheat-sheet.html#str","title":"<code>str</code>","text":"<p>The implementation of the <code>__str__</code> method is used when the <code>str(obj)</code> function is called on an object. This is used for general purpose, including printing.</p>"},{"location":"exams/midterm/cheat-sheet.html#repr","title":"<code>repr</code>","text":"<p>The implementation of the <code>__repr__</code> method is used when the <code>repr(obj)</code> function is called on an object. This typically represents a string that the computer interprets.</p> <p>During a interactive session or when <code>eval(str)</code> is called, the <code>__repr__</code> method is used. </p>"},{"location":"exams/midterm/cheat-sheet.html#lists","title":"Lists","text":""},{"location":"exams/midterm/cheat-sheet.html#list-functions","title":"List Functions","text":""},{"location":"exams/midterm/cheat-sheet.html#appending","title":"Appending","text":"<p>Use the <code>lst.append(item)</code> method to append (i.e add) an item to the end of the list.</p> Equivalent to <p>Using the <code>lst.append(item)</code> method is equivalent to the following:</p> <pre><code>a = [1, 2, 3]\nx = 4\na[len(a):] = [x]\na = a + [x]\na += [x]\na.insert(len(a), x)\n</code></pre>"},{"location":"exams/midterm/cheat-sheet.html#extending","title":"Extending","text":"<p>Use the <code>lst.extend(iterable)</code> method to extend the list with the items from the iterable. In other words, it appends every item from the iterable to the end of the list. This is equivalent to <code>lst[len(lst):] = iterable</code>.</p>"},{"location":"exams/midterm/cheat-sheet.html#inserting","title":"Inserting","text":"<p>Use the <code>lst.insert(index, item)</code> to insert an item at the given index. This shifts the rest of the elments to the right. You can think of it as <code>index</code> being the index of the item before which to insert.</p> <pre><code>a = [1, 2, 3]\na.insert(0, 69)\nprint(a) # [69, 1, 2, 3]\n</code></pre>"},{"location":"exams/midterm/cheat-sheet.html#removing","title":"Removing","text":"<p>Use the <code>lst.remove(item)</code> method to remove the first item from the list whose value is equal to <code>item</code>.</p> <p>Use the <code>lst.pop([index])</code> method to remove the item at the given index. If no index is specified, it removes the last item.</p>"},{"location":"exams/midterm/cheat-sheet.html#list-comprehensions","title":"List Comprehensions","text":"<p>Use the following syntax to create a list comprehension: <pre><code>[&lt;expression&gt; for &lt;name&gt; in &lt;iterable&gt; if &lt;condition&gt;]\n</code></pre></p>"},{"location":"exams/midterm/cheat-sheet.html#list-operations","title":"List Operations","text":""},{"location":"exams/midterm/cheat-sheet.html#bracket-notation","title":"Bracket Notation","text":"<p>To access a single item from a list with an index, use <code>lst[index]</code>.</p> <p>To shallow copy a list, use <code>lst[:]</code>.</p> <p>To shallow copy a slice of a list, use <code>lst[start:stop:step]</code>.</p>"},{"location":"exams/midterm/cheat-sheet.html#addition","title":"Addition","text":"<p>Use the <code>+</code> operator to concatenate two lists together. This creates a new list.</p>"},{"location":"exams/midterm/cheat-sheet.html#dictionaries","title":"Dictionaries","text":"<p>Keys must be immutable, as you cannot hash a mutable object while tracking its changes.</p>"},{"location":"exams/midterm/cheat-sheet.html#dictionary-functions","title":"Dictionary Functions","text":""},{"location":"exams/midterm/cheat-sheet.html#get","title":"Get","text":"<p>Use <code>dict.get(key, default)</code> to get the value of the key. If the key does not exist, it returns the default value.</p>"},{"location":"exams/midterm/cheat-sheet.html#keys","title":"Keys","text":"<p>Use <code>dict.keys()</code> to get a list of the keys in the dictionary.</p>"},{"location":"exams/midterm/cheat-sheet.html#values","title":"Values","text":"<p>Use <code>dict.values()</code> to get a list of the values in the dictionary.</p>"},{"location":"exams/midterm/cheat-sheet.html#items","title":"Items","text":"<p>Use <code>dict.items()</code> to get a list of the key-value pairs in the dictionary. This is a list of tuples.</p>"},{"location":"exams/midterm/cheat-sheet.html#control","title":"Control","text":""},{"location":"exams/midterm/cheat-sheet.html#pure-functions","title":"Pure Functions","text":"<p>A pure function will only return values, such as <code>abs(x)</code> and <code>pow(b, e)</code> Non-pure functions will have side effects, including but not limited to environment changes and prints.</p>"},{"location":"exams/midterm/cheat-sheet.html#life-cycle-of-user-defined-functions","title":"Life Cycle of User-Defined Functions","text":""},{"location":"exams/midterm/cheat-sheet.html#definition","title":"Definition","text":"<p>The operator is the name that binds to a function. The operands are evaluated. The respective function is then called on its parameters.</p>"},{"location":"exams/midterm/cheat-sheet.html#call-and-application","title":"Call and Application","text":"<ol> <li>Create a new frame</li> <li>Parameters are bound to the arguments</li> <li>Execute the body of the function</li> </ol>"},{"location":"exams/midterm/cheat-sheet.html#inheritance-throughout-frames","title":"Inheritance throughout Frames","text":"<p>The global frame is the initial frame where the program starts. It is the parent of all other frames.  When search for names, first look within the local frame, its parent(s), then finally global frames.</p>"},{"location":"exams/midterm/cheat-sheet.html#execution-rules","title":"Execution Rules","text":""},{"location":"exams/midterm/cheat-sheet.html#function-definition-statements","title":"Function Definition Statements","text":"<ol> <li>Create a new function value with the intrinsic name</li> <li>Parent is assigned to the current working frame</li> <li>Bind the name of the function to the funciton object within the current working frame</li> </ol>"},{"location":"exams/midterm/cheat-sheet.html#assignment-statements","title":"Assignment Statements","text":"<ol> <li>Evaluate the expression(s) that are being assigned to the name (i.e. the right side)</li> <li>Bind the names on the left to the evaluated values in the current working frame</li> </ol>"},{"location":"exams/midterm/cheat-sheet.html#conditional-statements","title":"Conditional Statements","text":"<ol> <li>Evaluate the header's expression</li> <li>If the expressions evaluates to a truthy value, execute the suite, and skip the <code>elif</code> and <code>else</code> clauses</li> <li>Otherwise, evaluate the next <code>elif</code> clause, until you reach the <code>else</code> clause.</li> </ol>"},{"location":"exams/midterm/cheat-sheet.html#while-statements","title":"While Statements","text":"<ol> <li>If the condition specific in the header evaluates to a truthy value, execute the suite, and repeat the process.</li> <li>When the condition evaluates to a false, exit the while loop. (i.e. do not execute the suite)</li> </ol>"},{"location":"exams/midterm/cheat-sheet.html#python-unique-features","title":"Python Unique Features","text":""},{"location":"exams/midterm/cheat-sheet.html#division","title":"Division","text":"<p>The <code>/</code> operator will always return a float, even if the result is a whole number. Use the <code>//</code> operator to perform floor division. This will return the quotient of the division, rounded down to the nearest integer.</p>"},{"location":"exams/midterm/cheat-sheet.html#none","title":"<code>None</code>","text":"<p><code>None</code> is a special value that represents nothing, similar to <code>null</code> in other languages.</p>"},{"location":"exams/midterm/cheat-sheet.html#multiple-return-values","title":"Multiple Return Values","text":"<p>You can return multiple values from a function by encapsulating them in a tuple.</p>"},{"location":"exams/midterm/cheat-sheet.html#boolean-context","title":"Boolean Context","text":"<p>In Python, the following values are considered falsy: - <code>False</code> - <code>None</code> - <code>0</code> - <code>\"\"</code> - <code>[]</code> - <code>()</code> - <code>{}</code> Truthy values are everything else.</p>"},{"location":"exams/midterm/cheat-sheet.html#recursion","title":"Recursion","text":""},{"location":"exams/midterm/cheat-sheet.html#recursive-steps","title":"Recursive Steps","text":""},{"location":"exams/midterm/cheat-sheet.html#identify-the-base-cases","title":"Identify the base case(s)","text":"<p>Think about the simplest and smallest possible inputs to your function, such that you know the answer immediately.</p>"},{"location":"exams/midterm/cheat-sheet.html#recursive-leap-of-faith","title":"Recursive Leap of Faith","text":"<p>Call your function on a smaller input, assuming that it works correctly.</p>"},{"location":"exams/midterm/cheat-sheet.html#recombination","title":"Recombination","text":"<p>Build up the answer to the original problem using the previous result</p>"},{"location":"exams/midterm/cheat-sheet.html#recursion-examples","title":"Recursion Examples","text":""},{"location":"exams/midterm/cheat-sheet.html#summation","title":"Summation","text":"<p>In this example, we return the sum of numbers through n (including n) with term applied to each number <pre><code>def summation(n, term): # n must be &gt;= 1\n# \nif n == 1:\nreturn term(n)\nreturn term(n) + summation(n - 1, term)\n</code></pre></p>"},{"location":"exams/midterm/cheat-sheet.html#number-of-eights","title":"Number of Eights","text":"<pre><code>def num_eights(pos):\nif pos % 10 == 8:\nreturn 1 + num_eights(pos // 10)\nelif pos &lt; 10:\nreturn 0\nreturn num_eights(pos // 10)\n</code></pre>"},{"location":"exams/midterm/cheat-sheet.html#tree-recursion-example","title":"Tree Recursion Example","text":""},{"location":"exams/midterm/cheat-sheet.html#counting-coins","title":"Counting Coins","text":"<p>In this example, we want to return the number of ways to make change using coins of value 1, 5, 10, 25. <pre><code>def get_smaller_coin(_):\nreturn None # Implementation not shown\ndef count_coins(change):\ndef helper(amount, parent_coin):\nif amount == 0:\nreturn 1\nif amount &lt; 0:\nreturn 0\nsmaller_coin = get_smaller_coin(parent_coin)\nif smaller_coin is None:\nreturn 1\nreturn helper(amount - parent_coin, parent_coin) + helper(amount, smaller_coin)\nreturn helper(change, 25)\n</code></pre></p>"},{"location":"exams/midterm/cheat-sheet.html#environment-diagrams","title":"Environment Diagrams","text":"<p>Environment diagrams will always begin a global frame, which is the parent of all other frames.</p> <p>Primitive values are stored within the table, all other objects are referenced with pointers.</p>"},{"location":"exams/midterm/cheat-sheet.html#syntax","title":"Syntax","text":""},{"location":"exams/midterm/cheat-sheet.html#frame-header","title":"Frame Header","text":"<p>The syntax from the frame header is as follows: <pre><code>f&lt;frame number&gt;: &lt;origin&gt; [parent=&lt;parent&gt;]\n</code></pre></p> <ul> <li><code>&lt;frame number&gt;</code> is the number of the frame, starting from 0</li> <li><code>&lt;origin&gt;</code> is the origin of the frame, which is either <code>global</code> or <code>function</code></li> <li><code>&lt;parent&gt;</code> is the parent of the frame, which is the frame number of the parent</li> </ul>"},{"location":"exams/midterm/cheat-sheet.html#function-syntax","title":"Function Syntax","text":"<p>The syntax for a function is as follows: <pre><code>func&lt;intrinsics name&gt;(&lt;parameters&gt;) [parent=&lt;parent&gt;]\n</code></pre></p> <ul> <li><code>&lt;intrinsics name&gt;</code> is the name of the function</li> <li><code>&lt;parameters&gt;</code> is the list of parameters, separated by commas</li> <li><code>&lt;parent&gt;</code> is the parent of the frame, which is the frame number of the parent</li> </ul>"},{"location":"python/control.html","title":"Lecture 3: Control","text":""},{"location":"python/control.html#pure-functions-vs-non-pure-functions","title":"Pure Functions vs Non-Pure Functions","text":""},{"location":"python/control.html#pure-functions","title":"Pure Functions","text":"<ul> <li>Functions that only return values.</li> </ul> Example <p>An example of a pure function is <code>abs(x)</code> and <code>pow(b, e)</code>.</p>"},{"location":"python/control.html#non-pure-functions","title":"Non-Pure Functions","text":"<ul> <li>Functions that have side effects.</li> </ul> Example <p>An example of a non-pure function is <code>print()</code>, which displays output and returns <code>None</code>.</p>"},{"location":"python/control.html#life-cycle-of-a-user-defined-function","title":"Life Cycle of a User Defined Function","text":""},{"location":"python/control.html#definition-lifecycle","title":"Definition Lifecycle","text":"<ol> <li>A new function is created.</li> <li>A name is bound to the function within the current frame.</li> </ol>"},{"location":"python/control.html#call-expression-lifecycle","title":"Call Expression Lifecycle","text":"<ol> <li>Operator and operands evaluate.</li> <li>Function called on arguments.</li> </ol>"},{"location":"python/control.html#calling-and-applying-lifecycle","title":"Calling and Applying Lifecycle","text":"<ol> <li>A new frame is created.</li> <li>Parameters bound to arguments.</li> <li>Body is executed in that new environment.</li> </ol>"},{"location":"python/control.html#naming-frames","title":"Naming Frames","text":"<ul> <li>Frames are named with the $fN$ format, where $N$ is the frame identifier (ID).</li> </ul>"},{"location":"python/control.html#environment-frames","title":"Environment &amp; Frames","text":"<ul> <li>Environment is a sequence of frames.<ol> <li>Global frame is the initial frame.</li> <li>Search for variables/names starts from the local frame, to parent, then n parent, and continues all the way to the global frame.</li> </ol> </li> </ul>"},{"location":"python/control.html#miscellaneous-python-features","title":"Miscellaneous Python Features","text":""},{"location":"python/control.html#infix-functions","title":"Infix Functions","text":"<ul> <li>A Kotlin reference to using symbols to \"call\" functions.</li> </ul>"},{"location":"python/control.html#division","title":"Division","text":"<ol> <li>Regular division will lead to floats.</li> <li>Floor division (<code>//</code>) will round down regardless.<ul> <li>Floor division by 10 will truncate the last number.</li> </ul> </li> <li>Modulo (<code>%</code>) will provide the remainder.<ul> <li>Opposite of floor division: when you modulo by 10, it gives you the last number.</li> </ul> </li> <li>Using floor and modulo results in answers in the format x remainder y.</li> </ol>"},{"location":"python/control.html#multiple-return-values","title":"Multiple Return Values","text":"<ul> <li>Utilize tuples for returning multiple values.</li> </ul>"},{"location":"python/control.html#docstringstests","title":"Docstrings/Tests","text":"<ul> <li>Use triple quotes, similar to <code>kdoc</code> in Kotlin.</li> <li>Doc tests provide an interpreter allowing you to write expected outputs.<ul> <li>Use <code>&gt;&gt;&gt;</code> to show input, then present the expected output on the subsequent line.</li> </ul> </li> </ul>"},{"location":"python/control.html#default-arguments","title":"Default Arguments","text":""},{"location":"python/control.html#statements","title":"Statements","text":"<ul> <li>These are executed by the interpreter to perform a specific action.</li> </ul>"},{"location":"python/control.html#statement-headers","title":"Statement Headers","text":"<ol> <li>The header determines the statement's type.</li> <li>Controls the subsequent suite.</li> <li>Suites are sequences of statements.</li> <li>Suites execute from top to bottom unless directed otherwise.</li> </ol>"},{"location":"python/control.html#execution-rule-of-if-statements","title":"Execution Rule of If-Statements","text":"<ol> <li>Evaluate the header expression.<ul> <li>If true, execute the suite and skip the subsequent clauses.</li> </ul> </li> </ol>"},{"location":"python/control.html#boolean-context","title":"Boolean Context","text":""},{"location":"python/control.html#false-values","title":"False Values","text":"<ul> <li>Examples: <code>False</code>, <code>0</code>, <code>\"\"</code>, <code>None</code>, etc.</li> </ul>"},{"location":"python/control.html#truth-values","title":"Truth Values","text":"<ul> <li>Basically, any other value not listed as a False value.</li> </ul>"},{"location":"python/control.html#while-statements","title":"While Statements","text":"<ol> <li>If the condition evaluates to true, the suite is executed, and then the condition is checked again.</li> <li>If the condition is false, the loop exits.</li> </ol>"},{"location":"python/environments.html","title":"Environments","text":""},{"location":"python/environments.html#environment-diagrams","title":"Environment Diagrams","text":"<ul> <li>Environment diagrams serve as tools to conceptually understand the functioning of programs. This understanding facilitates the prediction of program behavior, especially during:<ul> <li>Debugging: Aids in identifying issues and understanding code flow.</li> </ul> </li> </ul>"},{"location":"python/environments.html#frames","title":"Frames","text":""},{"location":"python/environments.html#introduction-to-frames","title":"Introduction to Frames","text":"<ul> <li>User-Defined Functions: Creating user-defined functions will result in the generation of frames.</li> <li>Builtin Functions: Contrarily, built-in functions do not generate frames.</li> <li>Global Frame: This is the starting frame and is unique because it does not correspond to any specific call expression or function.</li> </ul>"},{"location":"python/environments.html#parent-frames","title":"Parent Frames","text":"<ol> <li>Definition: The parent of a function is identified as the frame where the function was initially defined.</li> <li>Variable Lookup:<ul> <li>Begin the lookup in the current frame.</li> <li>If the variable isn't present, move to the parent frame, then its parent, and so on, until the global frame.</li> <li>If the variable still remains undiscovered across all frames, Python raises a <code>NameError</code>.</li> </ul> </li> </ol>"},{"location":"python/environments.html#functions","title":"Functions","text":""},{"location":"python/environments.html#function-definition","title":"Function Definition","text":"<ol> <li>When a function is defined, the function's value gets bound to its name, represented as:</li> </ol> <pre><code>func &lt;name&gt;(&lt;formal parameters&gt;) [parent=&lt;frame&gt;]\n</code></pre>"},{"location":"python/environments.html#function-application","title":"Function Application","text":"<ol> <li>Initiate by adding a local frame, labeled with the name of the function being executed.</li> <li>Clone the parent of the function into the local frame, denoted as <code>[parent=&lt;label&gt;]</code>.</li> <li>Bind the function's formal parameters to the respective arguments within the local frame.</li> <li>Proceed to execute the function's body within the environment that originates from this local frame.</li> </ol>"},{"location":"python/environments.html#functions-as-arguments","title":"Functions as Arguments","text":"<ul> <li>When referencing higher-order functions that have functions as arguments, it's pivotal to note that they attach to the parent frame, not the impending local frame.</li> </ul>"},{"location":"python/environments.html#currying","title":"Currying","text":"<ul> <li>Definition: Currying transforms a function accepting multiple arguments into a function that takes just a single argument. This resultant function becomes a higher-order function, which further returns functions to process the remaining arguments.</li> </ul>"},{"location":"python/hof.html","title":"Higher Order Functions","text":""},{"location":"python/hof.html#digit-manipulation","title":"Digit Manipulation","text":""},{"location":"python/hof.html#treating-numbers-as-strings-of-digits","title":"Treating Numbers as Strings of Digits","text":"<ul> <li>While it's impractical, it's beneficial to practice iteration using this method.</li> </ul>"},{"location":"python/hof.html#retrieving-digits","title":"Retrieving Digits","text":"<ul> <li>Utilize floor division and mod (by 10) to isolate individual digits.</li> </ul>"},{"location":"python/hof.html#understanding-functions","title":"Understanding Functions","text":""},{"location":"python/hof.html#domain","title":"Domain","text":"<ul> <li>Refers to all possible inputs a function can accept.</li> </ul>"},{"location":"python/hof.html#range","title":"Range","text":"<ul> <li>Refers to all possible outputs a function can produce.</li> </ul>"},{"location":"python/hof.html#behavior","title":"Behavior","text":"<ul> <li>Describes the relationship between the function's inputs and outputs.</li> </ul>"},{"location":"python/hof.html#design","title":"Design","text":"<ul> <li>Ensure that a function is assigned one specific task but has the flexibility to be applied in numerous related scenarios.</li> <li>Emphasize the \"write once, use many times\" philosophy.</li> </ul>"},{"location":"python/hof.html#generalization","title":"Generalization","text":"<ul> <li>By designing functions to handle a broad range of scenarios, we can generalize our solutions, promoting code reusability.</li> </ul>"},{"location":"python/hof.html#higher-order-functions_1","title":"Higher Order Functions","text":""},{"location":"python/hof.html#first-class-nature-of-functions","title":"First-Class Nature of Functions","text":"<ul> <li>In Python, functions are considered first-class, meaning they can be passed around like any other object (like a string, int, etc.)</li> </ul>"},{"location":"python/hof.html#characteristics-of-higher-order-functions","title":"Characteristics of Higher Order Functions","text":"<ul> <li>A function qualifies as \"higher order\" if it:<ol> <li>Accepts another function as an argument.</li> <li>Returns a function as its result.</li> </ol> </li> </ul>"},{"location":"python/hof.html#lambda-functions","title":"Lambda Functions","text":""},{"location":"python/hof.html#introduction","title":"Introduction","text":"<ul> <li>A lambda function is a succinct way to define a function, usually fitting within a single line.</li> <li>It's useful for quick, one-off operations where a full function definition might be overkill.</li> </ul>"},{"location":"python/hof.html#format","title":"Format","text":"<pre><code>lambda &lt;parameters&gt;: &lt;expression&gt;\n</code></pre>"},{"location":"python/hof.html#anonymity-of-lambda","title":"Anonymity of Lambda","text":"<ul> <li>Lambda expressions are anonymous, meaning they do not inherently have a name bound to them. They are often used for short-term operations where naming is not required.</li> </ul>"},{"location":"python/introduction.html","title":"Introduction to Computer Science","text":""},{"location":"python/introduction.html#questions-to-ask-self","title":"Questions to Ask Self","text":"<ul> <li>What problems can be solved using computation?</li> <li>How to solve problems, using computers</li> <li>How efficiently can a computer solve problems?</li> </ul>"},{"location":"python/introduction.html#cs61a-specifics","title":"CS61A Specifics","text":""},{"location":"python/introduction.html#managing-complexity","title":"Managing Complexity","text":"<p>How much a programmer is able to understand and work with their code</p>"},{"location":"python/introduction.html#abstraction","title":"Abstraction","text":"<p>Bundling pieces of information and thinking about what it does and how</p>"},{"location":"python/introduction.html#paradigms","title":"Paradigms","text":""},{"location":"python/introduction.html#introduction-to-programming","title":"Introduction to Programming","text":"<ul> <li>Understand Python</li> <li>Multiple ideas to large projects</li> <li>How computers interpret code</li> </ul>"},{"location":"python/introduction.html#languages","title":"Languages","text":"<p>Python, Scheme, SQL, and RegEx</p>"},{"location":"python/introduction.html#textbook","title":"Textbook","text":"<p>Composing Programs</p>"},{"location":"python/introduction.html#computer-programs","title":"Computer Programs","text":"<p>Computer Programs are used to manipulate values</p>"},{"location":"python/introduction.html#expressions","title":"Expressions","text":"<p>Describes a computation and evaluation to a value, eg. $20 + 21$, $\\pi$, $f(x)$, (can be represented to function calls)</p> <p>Python is able to evaluate expressions</p>"},{"location":"python/introduction.html#evaluating-call-expressions-functions","title":"Evaluating Call Expressions (Functions)","text":"<ol> <li>Evaluate the operator (function name)</li> <li>Evaluate the operands (arguments) from left to right</li> <li>Apply operator to the operands</li> </ol>"},{"location":"python/names-and-functions.html","title":"Names and Functions","text":""},{"location":"python/names-and-functions.html#values","title":"Values","text":""},{"location":"python/names-and-functions.html#primitive-data-types","title":"Primitive Data Types","text":"<p>Integers, Strings, Floats, Booleans Expressions evaluate to values</p>"},{"location":"python/names-and-functions.html#names","title":"Names","text":"<p>Assigning values to names, otherwise known as variables (can also represent functions)</p>"},{"location":"python/names-and-functions.html#assignment-statements","title":"Assignment Statements","text":"<p>The statement which defines the variable</p> <p>Tip</p> <p>Python does not evaluate assignment statements (nothing is returned when you assign a variable)</p> <p>Variables assigned in Python are inherently mutable (that does not mean the object is mutable)</p>"},{"location":"python/names-and-functions.html#split-expressions","title":"Split Expressions","text":"<pre><code>a = 1\nb = 2\na, b = b, a # Operation happens instantly: The values for a and b are swapped \n</code></pre>"},{"location":"python/names-and-functions.html#environment-diagram","title":"Environment Diagram","text":"<p>Allows for the tracking of value of variables on a per-frame basis, however will typically show the final state of the program Environment diagrams allow you to track the value of variables and abstract away sequences of computation</p>"},{"location":"python/names-and-functions.html#functions","title":"Functions","text":"<p>A sequence of code that performs a specific task and can be reused easily.</p>"},{"location":"python/names-and-functions.html#inputs-and-outputs","title":"Inputs and Outputs","text":"<ul> <li>Inputs are known as arguments</li> <li>Outputs are known as return values</li> </ul>"},{"location":"python/names-and-functions.html#function-creation","title":"Function Creation","text":"<ul> <li>Functions can be created with the <code>def</code> statement</li> <li>Indents are required to give scope, give body, etc.</li> </ul>"},{"location":"python/names-and-functions.html#anatomy","title":"Anatomy","text":""},{"location":"python/names-and-functions.html#function-signature","title":"Function signature","text":"<p>Indicates name and number of arguments</p>"},{"location":"python/names-and-functions.html#function-body","title":"Function Body","text":"<p>Defines the computation performed when the function is applied</p>"},{"location":"python/names-and-functions.html#default-return","title":"Default Return","text":"<p>Default return type is <code>None</code> (equivalent to <code>null</code>).</p>"},{"location":"python/names-and-functions.html#environment-diagram-scopes","title":"Environment Diagram Scopes","text":"<p>Environment Diagram has different frames (or scopes).</p>"},{"location":"python/names-and-functions.html#calling-user-defined-functions","title":"Calling user-defined functions","text":"<ol> <li>Retrieve intrinsic name (i.e. the real name, or the real function, as function names can be reassigned)</li> <li>Bind function parameters to arguments within the frame</li> <li>Execute the body with the environment</li> </ol>"}]}